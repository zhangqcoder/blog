/**
 * Generated by "@vuepress/internal-site-data"
 */
export const siteData = {
  "title": "zhangQ博客",
  "description": "喜欢前端技术的一名小学生",
  "base": "/blog/",
  "headTags": [],
  "pages": [
    {
      "title": "Home",
      "frontmatter": {
        "home": true,
        "heroImage": "./logo.png",
        "actionText": "开始阅读 →",
        "actionLink": "/article/",
        "features": [
          {
            "title": "JS基础",
            "details": "掌握高级JavaScript技巧。"
          },
          {
            "title": "React深入",
            "details": "从实际问题出发，由源码深入React。"
          },
          {
            "title": "多端开发",
            "details": "用JavaScript开发移动端、客户端、Web端..."
          }
        ],
        "footer": "MIT Licensed | Copyright © 2019-present ConardLi"
      },
      "regularPath": "/",
      "relativePath": "README.md",
      "key": "v-40d6e052",
      "path": "/"
    },
    {
      "title": "JavaScript编码能力",
      "frontmatter": {
        "title": "JavaScript编码能力",
        "date": "2019-11-05T21:10:00.000Z",
        "tags": [
          "JavaScript"
        ]
      },
      "regularPath": "/article/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/JavaScript%E7%BC%96%E7%A0%81%E8%83%BD%E5%8A%9B.html",
      "relativePath": "article/数据结构和算法/JavaScript编码能力.md",
      "key": "v-77e90d60",
      "path": "/article/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/JavaScript%E7%BC%96%E7%A0%81%E8%83%BD%E5%8A%9B.html",
      "headers": [
        {
          "level": 2,
          "title": "1.多种方式实现数组去重、扁平化、对比优缺点",
          "slug": "_1-多种方式实现数组去重、扁平化、对比优缺点"
        },
        {
          "level": 3,
          "title": "数组去重",
          "slug": "数组去重"
        },
        {
          "level": 3,
          "title": "扁平化",
          "slug": "扁平化"
        },
        {
          "level": 2,
          "title": "2.多种方式实现深拷贝、对比优缺点",
          "slug": "_2-多种方式实现深拷贝、对比优缺点"
        },
        {
          "level": 2,
          "title": "3.手写函数柯里化工具函数、并理解其应用场景和优势",
          "slug": "_3-手写函数柯里化工具函数、并理解其应用场景和优势"
        },
        {
          "level": 2,
          "title": "4.手写防抖和节流工具函数、并理解其内部原理和应用场景",
          "slug": "_4-手写防抖和节流工具函数、并理解其内部原理和应用场景"
        },
        {
          "level": 2,
          "title": "5.实现一个 sleep 函数",
          "slug": "_5-实现一个-sleep-函数"
        },
        {
          "level": 3,
          "title": "Promise 版本",
          "slug": "promise-版本"
        },
        {
          "level": 3,
          "title": "Async/Await 版本",
          "slug": "async-await-版本"
        }
      ]
    },
    {
      "title": "文章目录",
      "frontmatter": {
        "title": "文章目录"
      },
      "regularPath": "/article/",
      "relativePath": "article/README.md",
      "key": "v-2b3d3189",
      "path": "/article/",
      "headers": [
        {
          "level": 3,
          "title": "JavaScript 基础",
          "slug": "javascript-基础"
        },
        {
          "level": 3,
          "title": "数据结构和算法",
          "slug": "数据结构和算法"
        },
        {
          "level": 3,
          "title": "多端开发",
          "slug": "多端开发"
        },
        {
          "level": 3,
          "title": "浏览器和网络",
          "slug": "浏览器和网络"
        },
        {
          "level": 3,
          "title": "前端工程化",
          "slug": "前端工程化"
        },
        {
          "level": 3,
          "title": "效果",
          "slug": "效果"
        },
        {
          "level": 3,
          "title": "博客搭建",
          "slug": "博客搭建"
        }
      ]
    },
    {
      "title": "数据结构",
      "frontmatter": {
        "title": "数据结构",
        "date": "2019-11-05T21:10:00.000Z",
        "tags": [
          "JavaScript"
        ]
      },
      "regularPath": "/article/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html",
      "relativePath": "article/数据结构和算法/数据结构.md",
      "key": "v-735772ad",
      "path": "/article/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html",
      "headers": [
        {
          "level": 2,
          "title": "1.理解常见数据结构的特点，以及他们在不同场景下使用的优缺点",
          "slug": "_1-理解常见数据结构的特点，以及他们在不同场景下使用的优缺点"
        },
        {
          "level": 2,
          "title": "2.理解数组、字符串的存储原理，并熟练应用他们解决问题",
          "slug": "_2-理解数组、字符串的存储原理，并熟练应用他们解决问题"
        },
        {
          "level": 3,
          "title": "字符串",
          "slug": "字符串"
        },
        {
          "level": 3,
          "title": "数组",
          "slug": "数组"
        },
        {
          "level": 2,
          "title": "3.理解二叉树、栈、队列、哈希表的基本结构和特点，并可以应用它解决问题",
          "slug": "_3-理解二叉树、栈、队列、哈希表的基本结构和特点，并可以应用它解决问题"
        },
        {
          "level": 2,
          "title": "4.了解图、堆的基本结构和使用场景",
          "slug": "_4-了解图、堆的基本结构和使用场景"
        }
      ]
    },
    {
      "title": "算法",
      "frontmatter": {
        "title": "算法",
        "date": "2019-11-05T21:10:00.000Z",
        "tags": [
          "JavaScript"
        ]
      },
      "regularPath": "/article/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95.html",
      "relativePath": "article/数据结构和算法/算法.md",
      "key": "v-4a3df9c9",
      "path": "/article/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95.html",
      "headers": [
        {
          "level": 2,
          "title": "1.可计算一个算法的时间复杂度和空间复杂度，可估计业务逻辑代码的耗时和内存消耗",
          "slug": "_1-可计算一个算法的时间复杂度和空间复杂度，可估计业务逻辑代码的耗时和内存消耗"
        },
        {
          "level": 2,
          "title": "2.至少理解五种排序算法的实现原理、应用场景、优缺点，可快速说出时间、空间复杂度",
          "slug": "_2-至少理解五种排序算法的实现原理、应用场景、优缺点，可快速说出时间、空间复杂度"
        },
        {
          "level": 2,
          "title": "3.了解递归和循环的优缺点、应用场景、并可在开发中熟练应用",
          "slug": "_3-了解递归和循环的优缺点、应用场景、并可在开发中熟练应用"
        },
        {
          "level": 2,
          "title": "4.可应用回溯算法、贪心算法、分治算法、动态规划等解决复杂问题",
          "slug": "_4-可应用回溯算法、贪心算法、分治算法、动态规划等解决复杂问题"
        },
        {
          "level": 2,
          "title": "5.前端处理海量数据的算法方案",
          "slug": "_5-前端处理海量数据的算法方案"
        },
        {
          "level": 2,
          "title": "6.深度优先遍历和广度优先遍历",
          "slug": "_6-深度优先遍历和广度优先遍历"
        },
        {
          "level": 3,
          "title": "深度优先遍历",
          "slug": "深度优先遍历"
        },
        {
          "level": 3,
          "title": "广度优先遍历",
          "slug": "广度优先遍历"
        }
      ]
    },
    {
      "title": "语法和API",
      "frontmatter": {
        "title": "语法和API",
        "date": "2019-09-22T17:46:00.000Z",
        "tags": [
          "JavaScript"
        ]
      },
      "regularPath": "/article/JavaScript%E5%9F%BA%E7%A1%80/%E8%AF%AD%E6%B3%95%E5%92%8CAPI.html",
      "relativePath": "article/JavaScript基础/语法和API.md",
      "key": "v-30096ca4",
      "path": "/article/JavaScript%E5%9F%BA%E7%A1%80/%E8%AF%AD%E6%B3%95%E5%92%8CAPI.html",
      "headers": [
        {
          "level": 2,
          "title": "一、理解 ECMAScript 和 JavaScript 的关系",
          "slug": "一、理解-ecmascript-和-javascript-的关系"
        },
        {
          "level": 2,
          "title": "二、熟练运用 es5、es6 提供的语法规范",
          "slug": "二、熟练运用-es5、es6-提供的语法规范"
        },
        {
          "level": 2,
          "title": "三、熟练掌握 JavaScript 提供的全局对象（例如 Date、Math）、全局函数（例如 decodeURI、isNaN）、全局属性（例如 Infinity、undefined）",
          "slug": "三、熟练掌握-javascript-提供的全局对象（例如-date、math）、全局函数（例如-decodeuri、isnan）、全局属性（例如-infinity、undefined）"
        },
        {
          "level": 2,
          "title": "四、熟练应用 map、reduce、filter 等高阶函数解决问题",
          "slug": "四、熟练应用-map、reduce、filter-等高阶函数解决问题"
        },
        {
          "level": 2,
          "title": "五、setInterval 需要注意的点，使用 settimeout 实现 setInterval",
          "slug": "五、setinterval-需要注意的点，使用-settimeout-实现-setinterval"
        },
        {
          "level": 3,
          "title": "setInterval 需要注意的点",
          "slug": "setinterval-需要注意的点"
        },
        {
          "level": 3,
          "title": "使用 settimeout 实现 setInterval",
          "slug": "使用-settimeout-实现-setinterval"
        },
        {
          "level": 2,
          "title": "六、JavaScript 提供的正则表达式 API、可以使用正则表达式（邮箱校验、URL 解析、去重等）解决常见问题",
          "slug": "六、javascript-提供的正则表达式-api、可以使用正则表达式（邮箱校验、url-解析、去重等）解决常见问题"
        },
        {
          "level": 2,
          "title": "七、JavaScript 异常处理的方式，统一的异常处理方案",
          "slug": "七、javascript-异常处理的方式，统一的异常处理方案"
        },
        {
          "level": 3,
          "title": "Error 对象",
          "slug": "error-对象"
        },
        {
          "level": 3,
          "title": "Throw",
          "slug": "throw"
        },
        {
          "level": 3,
          "title": "Try / Catch",
          "slug": "try-catch"
        },
        {
          "level": 3,
          "title": "window.onerror",
          "slug": "window-onerror"
        },
        {
          "level": 3,
          "title": "Promise 中的异常",
          "slug": "promise-中的异常"
        },
        {
          "level": 3,
          "title": "window.onunhandledrejection",
          "slug": "window-onunhandledrejection"
        },
        {
          "level": 3,
          "title": "window.rejectionhandled",
          "slug": "window-rejectionhandled"
        },
        {
          "level": 3,
          "title": "统一异常处理",
          "slug": "统一异常处理"
        }
      ]
    },
    {
      "title": "原型和原型链",
      "frontmatter": {
        "title": "原型和原型链",
        "date": "2019-09-16T21:39:00.000Z",
        "tags": [
          "JavaScript"
        ]
      },
      "regularPath": "/article/JavaScript%E5%9F%BA%E7%A1%80/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE.html",
      "relativePath": "article/JavaScript基础/原型和原型链.md",
      "key": "v-60c49ead",
      "path": "/article/JavaScript%E5%9F%BA%E7%A1%80/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE.html",
      "headers": [
        {
          "level": 2,
          "title": "一、理解原型设计模式以及 JavaScript 中的原型规则",
          "slug": "一、理解原型设计模式以及-javascript-中的原型规则"
        },
        {
          "level": 3,
          "title": "设计模式",
          "slug": "设计模式"
        },
        {
          "level": 3,
          "title": "原型规则",
          "slug": "原型规则"
        },
        {
          "level": 2,
          "title": "二、instanceof 的底层实现原理，手动实现一个 instanceof",
          "slug": "二、instanceof-的底层实现原理，手动实现一个-instanceof"
        },
        {
          "level": 2,
          "title": "三、实现继承的几种方式以及他们的优缺点",
          "slug": "三、实现继承的几种方式以及他们的优缺点"
        },
        {
          "level": 3,
          "title": "原型链继承",
          "slug": "原型链继承"
        },
        {
          "level": 3,
          "title": "构造函数继承",
          "slug": "构造函数继承"
        },
        {
          "level": 3,
          "title": "组合式继承",
          "slug": "组合式继承"
        },
        {
          "level": 3,
          "title": "寄生组合式继承",
          "slug": "寄生组合式继承"
        },
        {
          "level": 2,
          "title": "四、至少说出一种开源项目(如 Node)中应用原型继承的案例",
          "slug": "四、至少说出一种开源项目-如-node-中应用原型继承的案例"
        },
        {
          "level": 3,
          "title": "Vue.extend( options )",
          "slug": "vue-extend-options"
        },
        {
          "level": 3,
          "title": "为什么使用 extend",
          "slug": "为什么使用-extend"
        },
        {
          "level": 2,
          "title": "五、可以描述 new 一个对象的详细过程，手动实现一个 new 操作符",
          "slug": "五、可以描述-new-一个对象的详细过程，手动实现一个-new-操作符"
        },
        {
          "level": 3,
          "title": "解析",
          "slug": "解析"
        },
        {
          "level": 2,
          "title": "六、理解 ES6 class 构造以及继承的底层实现原理",
          "slug": "六、理解-es6-class-构造以及继承的底层实现原理"
        },
        {
          "level": 3,
          "title": "ES6 class 使用",
          "slug": "es6-class-使用"
        },
        {
          "level": 3,
          "title": "class 的实现",
          "slug": "class-的实现"
        },
        {
          "level": 3,
          "title": "继承实现",
          "slug": "继承实现"
        },
        {
          "level": 3,
          "title": "super",
          "slug": "super"
        }
      ]
    },
    {
      "title": "手动实现前端轮子",
      "frontmatter": {
        "title": "手动实现前端轮子",
        "date": "2019-11-05T21:09:00.000Z",
        "tags": [
          "JavaScript"
        ]
      },
      "regularPath": "/article/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E8%BD%AE%E5%AD%90.html",
      "relativePath": "article/数据结构和算法/手动实现前端轮子.md",
      "key": "v-73cae38a",
      "path": "/article/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E8%BD%AE%E5%AD%90.html",
      "headers": [
        {
          "level": 2,
          "title": "1.手动实现 call、apply、bind、new",
          "slug": "_1-手动实现-call、apply、bind、new"
        },
        {
          "level": 3,
          "title": "call 实现",
          "slug": "call-实现"
        },
        {
          "level": 3,
          "title": "apply 实现",
          "slug": "apply-实现"
        },
        {
          "level": 3,
          "title": "bind 实现",
          "slug": "bind-实现"
        },
        {
          "level": 3,
          "title": "函数模拟 new 关键字",
          "slug": "函数模拟-new-关键字"
        },
        {
          "level": 2,
          "title": "2.手动实现符合 Promise/A+规范的 Promise、手动实现 async await",
          "slug": "_2-手动实现符合-promise-a-规范的-promise、手动实现-async-await"
        },
        {
          "level": 3,
          "title": "Promise",
          "slug": "promise"
        },
        {
          "level": 3,
          "title": "async/await",
          "slug": "async-await"
        },
        {
          "level": 2,
          "title": "3.手写一个 EventEmitter 实现事件发布、订阅",
          "slug": "_3-手写一个-eventemitter-实现事件发布、订阅"
        },
        {
          "level": 2,
          "title": "4.可以说出两种实现双向绑定的方案、可以手动实现",
          "slug": "_4-可以说出两种实现双向绑定的方案、可以手动实现"
        },
        {
          "level": 3,
          "title": "极简版的双向绑定",
          "slug": "极简版的双向绑定"
        },
        {
          "level": 3,
          "title": "升级版的双向绑定",
          "slug": "升级版的双向绑定"
        },
        {
          "level": 3,
          "title": "Proxy 实现的双向绑定",
          "slug": "proxy-实现的双向绑定"
        },
        {
          "level": 2,
          "title": "5.手写 JSON.parse、JSON.stringify",
          "slug": "_5-手写-json-parse、json-stringify"
        },
        {
          "level": 3,
          "title": "JSON.parse",
          "slug": "json-parse"
        },
        {
          "level": 3,
          "title": "JSON.stringify",
          "slug": "json-stringify"
        },
        {
          "level": 2,
          "title": "6.手写一个模版引擎，并能解释其中原理",
          "slug": "_6-手写一个模版引擎，并能解释其中原理"
        },
        {
          "level": 2,
          "title": "7.手写懒加载、下拉刷新、上拉加载、预加载等效果",
          "slug": "_7-手写懒加载、下拉刷新、上拉加载、预加载等效果"
        }
      ]
    },
    {
      "title": "执行机制",
      "frontmatter": {
        "title": "执行机制",
        "date": "2019-09-22T17:46:00.000Z",
        "tags": [
          "JavaScript"
        ]
      },
      "regularPath": "/article/JavaScript%E5%9F%BA%E7%A1%80/%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6.html",
      "relativePath": "article/JavaScript基础/执行机制.md",
      "key": "v-5e846cf1",
      "path": "/article/JavaScript%E5%9F%BA%E7%A1%80/%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6.html",
      "headers": [
        {
          "level": 2,
          "title": "一、为何 try 里面放 return，finally 还会执行，理解其内部机制",
          "slug": "一、为何-try-里面放-return，finally-还会执行，理解其内部机制"
        },
        {
          "level": 3,
          "title": "Completion 类型",
          "slug": "completion-类型"
        },
        {
          "level": 3,
          "title": "普通语句",
          "slug": "普通语句"
        },
        {
          "level": 3,
          "title": "语句块",
          "slug": "语句块"
        },
        {
          "level": 3,
          "title": "控制型语句",
          "slug": "控制型语句"
        },
        {
          "level": 3,
          "title": "带标签的语句",
          "slug": "带标签的语句"
        },
        {
          "level": 2,
          "title": "二、宏任务和微任务分别有哪些",
          "slug": "二、宏任务和微任务分别有哪些"
        },
        {
          "level": 2,
          "title": "三、JavaScript 如何实现异步编程，可以详细描述 EventLoop 机制",
          "slug": "三、javascript-如何实现异步编程，可以详细描述-eventloop-机制"
        },
        {
          "level": 2,
          "title": "四、可以快速分析一个复杂的异步嵌套逻辑，并掌握分析方法",
          "slug": "四、可以快速分析一个复杂的异步嵌套逻辑，并掌握分析方法"
        },
        {
          "level": 2,
          "title": "五、使用 Promise 实现串行",
          "slug": "五、使用-promise-实现串行"
        },
        {
          "level": 3,
          "title": "概述",
          "slug": "概述"
        },
        {
          "level": 3,
          "title": "精读",
          "slug": "精读"
        },
        {
          "level": 3,
          "title": "更简单的方法",
          "slug": "更简单的方法"
        },
        {
          "level": 2,
          "title": "六、Node 与浏览器 EventLoop 的差异",
          "slug": "六、node-与浏览器-eventloop-的差异"
        },
        {
          "level": 3,
          "title": "与浏览器环境有何不同",
          "slug": "与浏览器环境有何不同"
        },
        {
          "level": 3,
          "title": "事件循环模型",
          "slug": "事件循环模型"
        },
        {
          "level": 3,
          "title": "事件循环各阶段详解",
          "slug": "事件循环各阶段详解"
        },
        {
          "level": 3,
          "title": "推迟任务执行的方法",
          "slug": "推迟任务执行的方法"
        },
        {
          "level": 2,
          "title": "七、如何在保证页面运行流畅的情况下处理海量数据",
          "slug": "七、如何在保证页面运行流畅的情况下处理海量数据"
        },
        {
          "level": 3,
          "title": "策略",
          "slug": "策略"
        },
        {
          "level": 3,
          "title": "Demo",
          "slug": "demo"
        },
        {
          "level": 3,
          "title": "算法说明",
          "slug": "算法说明"
        }
      ]
    },
    {
      "title": "变量和类型",
      "frontmatter": {
        "title": "变量和类型",
        "date": "2019-09-14T16:47:00.000Z",
        "tags": [
          "JavaScript"
        ]
      },
      "regularPath": "/article/JavaScript%E5%9F%BA%E7%A1%80/%E5%8F%98%E9%87%8F%E5%92%8C%E7%B1%BB%E5%9E%8B.html",
      "relativePath": "article/JavaScript基础/变量和类型.md",
      "key": "v-037c620f",
      "path": "/article/JavaScript%E5%9F%BA%E7%A1%80/%E5%8F%98%E9%87%8F%E5%92%8C%E7%B1%BB%E5%9E%8B.html",
      "headers": [
        {
          "level": 2,
          "title": "一、JavaScript 规定了几种语言类型",
          "slug": "一、javascript-规定了几种语言类型"
        },
        {
          "level": 2,
          "title": "二、JavaScript 对象的底层数据结构是什么",
          "slug": "二、javascript-对象的底层数据结构是什么"
        },
        {
          "level": 2,
          "title": "三、Symbol 类型在实际开发中的应用、可手动实现一个简单的 Symbol",
          "slug": "三、symbol-类型在实际开发中的应用、可手动实现一个简单的-symbol"
        },
        {
          "level": 2,
          "title": "四、JavaScript 中的变量在内存中的具体存储形式",
          "slug": "四、javascript-中的变量在内存中的具体存储形式"
        },
        {
          "level": 2,
          "title": "五、基本类型对应的内置对象，以及他们之间的装箱拆箱操作",
          "slug": "五、基本类型对应的内置对象，以及他们之间的装箱拆箱操作"
        },
        {
          "level": 2,
          "title": "六、理解值类型和引用类型",
          "slug": "六、理解值类型和引用类型"
        },
        {
          "level": 2,
          "title": "七、null 和 undefined 的区别",
          "slug": "七、null-和-undefined-的区别"
        },
        {
          "level": 2,
          "title": "八、至少可以说出三种判断 JavaScript 数据类型的方式，以及他们的优缺点，如何准确的判断数组类型",
          "slug": "八、至少可以说出三种判断-javascript-数据类型的方式，以及他们的优缺点，如何准确的判断数组类型"
        },
        {
          "level": 2,
          "title": "九、可能发生隐式类型转换的场景以及转换原则，应如何避免或巧妙应用",
          "slug": "九、可能发生隐式类型转换的场景以及转换原则，应如何避免或巧妙应用"
        },
        {
          "level": 2,
          "title": "十、出现小数精度丢失的原因，JavaScript 可以存储的最大数字、最大安全数字，JavaScript 处理大数字的方法、避免精度丢失的方法",
          "slug": "十、出现小数精度丢失的原因，javascript-可以存储的最大数字、最大安全数字，javascript-处理大数字的方法、避免精度丢失的方法"
        }
      ]
    },
    {
      "title": "作用域和闭包",
      "frontmatter": {
        "title": "作用域和闭包",
        "date": "2019-09-22T17:46:00.000Z",
        "tags": [
          "JavaScript"
        ]
      },
      "regularPath": "/article/JavaScript%E5%9F%BA%E7%A1%80/%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85.html",
      "relativePath": "article/JavaScript基础/作用域和闭包.md",
      "key": "v-4523d015",
      "path": "/article/JavaScript%E5%9F%BA%E7%A1%80/%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85.html",
      "headers": [
        {
          "level": 2,
          "title": "一、理解 JavaScript 的作用域、作用域链和内部原理",
          "slug": "一、理解-javascript-的作用域、作用域链和内部原理"
        },
        {
          "level": 3,
          "title": "作用域",
          "slug": "作用域"
        },
        {
          "level": 3,
          "title": "作用域链",
          "slug": "作用域链"
        },
        {
          "level": 3,
          "title": "内部原理",
          "slug": "内部原理"
        },
        {
          "level": 2,
          "title": "二、理解词法作用域和动态作用域",
          "slug": "二、理解词法作用域和动态作用域"
        },
        {
          "level": 3,
          "title": "词法作用域",
          "slug": "词法作用域"
        },
        {
          "level": 3,
          "title": "动态作用域",
          "slug": "动态作用域"
        },
        {
          "level": 2,
          "title": "三、理解 JavaScript 的执行上下文栈，可以应用堆栈信息快速定位问题",
          "slug": "三、理解-javascript-的执行上下文栈，可以应用堆栈信息快速定位问题"
        },
        {
          "level": 3,
          "title": "执行上下文",
          "slug": "执行上下文"
        },
        {
          "level": 3,
          "title": "执行栈",
          "slug": "执行栈"
        },
        {
          "level": 3,
          "title": "执行上下文是如何被创建的",
          "slug": "执行上下文是如何被创建的"
        },
        {
          "level": 3,
          "title": "创建阶段",
          "slug": "创建阶段"
        },
        {
          "level": 3,
          "title": "执行阶段",
          "slug": "执行阶段"
        },
        {
          "level": 3,
          "title": "错误堆栈的裁剪",
          "slug": "错误堆栈的裁剪"
        },
        {
          "level": 3,
          "title": "错误调试",
          "slug": "错误调试"
        },
        {
          "level": 2,
          "title": "四、this 的原理以及几种不同使用场景的取值",
          "slug": "四、this-的原理以及几种不同使用场景的取值"
        },
        {
          "level": 3,
          "title": "作为对象方法调用",
          "slug": "作为对象方法调用"
        },
        {
          "level": 3,
          "title": "作为函数调用",
          "slug": "作为函数调用"
        },
        {
          "level": 3,
          "title": "作为构造函数调用",
          "slug": "作为构造函数调用"
        },
        {
          "level": 3,
          "title": "在 call 或者 apply，bind 中调用",
          "slug": "在-call-或者-apply，bind-中调用"
        },
        {
          "level": 2,
          "title": "五、闭包的实现原理和作用，可以列举几个开发中闭包的实际应用",
          "slug": "五、闭包的实现原理和作用，可以列举几个开发中闭包的实际应用"
        },
        {
          "level": 3,
          "title": "闭包的概念",
          "slug": "闭包的概念"
        },
        {
          "level": 3,
          "title": "闭包的作用",
          "slug": "闭包的作用"
        },
        {
          "level": 3,
          "title": "闭包的优点",
          "slug": "闭包的优点"
        },
        {
          "level": 3,
          "title": "闭包的缺点",
          "slug": "闭包的缺点"
        },
        {
          "level": 3,
          "title": "闭包在实际中的应用",
          "slug": "闭包在实际中的应用"
        },
        {
          "level": 2,
          "title": "六、理解堆栈溢出和内存泄漏的原理，如何防止",
          "slug": "六、理解堆栈溢出和内存泄漏的原理，如何防止"
        },
        {
          "level": 3,
          "title": "内存泄露",
          "slug": "内存泄露"
        },
        {
          "level": 3,
          "title": "堆栈溢出",
          "slug": "堆栈溢出"
        },
        {
          "level": 3,
          "title": "标记清除法",
          "slug": "标记清除法"
        },
        {
          "level": 3,
          "title": "常见的内存泄露的原因",
          "slug": "常见的内存泄露的原因"
        },
        {
          "level": 3,
          "title": "解决方法",
          "slug": "解决方法"
        },
        {
          "level": 2,
          "title": "七、如何处理循环的异步操作",
          "slug": "七、如何处理循环的异步操作"
        },
        {
          "level": 3,
          "title": "使用自执行函数",
          "slug": "使用自执行函数"
        },
        {
          "level": 3,
          "title": "使用递归函数",
          "slug": "使用递归函数"
        },
        {
          "level": 3,
          "title": "使用 async/await",
          "slug": "使用-async-await"
        },
        {
          "level": 2,
          "title": "八、理解模块化解决的实际问题，可列举几个模块化方案并理解其中原理",
          "slug": "八、理解模块化解决的实际问题，可列举几个模块化方案并理解其中原理"
        },
        {
          "level": 3,
          "title": "CommonJS 规范（同步加载模块）",
          "slug": "commonjs-规范（同步加载模块）"
        },
        {
          "level": 3,
          "title": "AMD（异步加载模块）",
          "slug": "amd（异步加载模块）"
        },
        {
          "level": 3,
          "title": "CMD 规范（异步加载模块）",
          "slug": "cmd-规范（异步加载模块）"
        },
        {
          "level": 3,
          "title": "AMD 与 CMD 的区别",
          "slug": "amd-与-cmd-的区别"
        },
        {
          "level": 3,
          "title": "UMD",
          "slug": "umd"
        },
        {
          "level": 3,
          "title": "ES6 模块化",
          "slug": "es6-模块化"
        },
        {
          "level": 3,
          "title": "回到问题“require 与 import 的区别”",
          "slug": "回到问题-require-与-import-的区别"
        }
      ]
    }
  ],
  "themeConfig": {
    "nav": [
      {
        "text": "文章目录",
        "link": "/article/"
      },
      {
        "text": "github",
        "link": "https://github.com/zhangqcoder"
      }
    ],
    "sidebar": {
      "/article/": [
        "/article/",
        {
          "title": "JavaScript 基础",
          "children": [
            "/article/JavaScript基础/变量和类型",
            "/article/JavaScript基础/原型和原型链",
            "/article/JavaScript基础/作用域和闭包",
            "/article/JavaScript基础/执行机制",
            "/article/JavaScript基础/语法和API"
          ]
        },
        {
          "title": "数据结构和算法",
          "children": [
            "/article/数据结构和算法/JavaScript编码能力",
            "/article/数据结构和算法/手动实现前端轮子",
            "/article/数据结构和算法/数据结构",
            "/article/数据结构和算法/算法"
          ]
        }
      ]
    },
    "sidebarDepth": 2,
    "lastUpdated": "Last Updated"
  }
}